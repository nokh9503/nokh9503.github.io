<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://nokh9503.github.io</id><title>코딩이 싫은 컴공</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-03-13T23:28:10+09:00</updated> <author> <name>nokh9503</name> <uri>https://nokh9503.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nokh9503.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 nokh9503 </rights> <icon>/nokh9503.github.io/assets/img/favicons/favicon.ico</icon> <logo>/nokh9503.github.io/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[백준 5585번] 거스름돈</title><link href="https://nokh9503.github.io/posts/%EB%B0%B1%EC%A4%80-5585-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88/" rel="alternate" type="text/html" title="[백준 5585번] 거스름돈" /><published>2021-03-13T23:13:00+09:00</published> <updated>2021-03-13T23:13:00+09:00</updated> <id>https://nokh9503.github.io/posts/%EB%B0%B1%EC%A4%80-5585-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88/</id> <content src="https://nokh9503.github.io/posts/%EB%B0%B1%EC%A4%80-5585-%EA%B1%B0%EC%8A%A4%EB%A6%84%EB%8F%88/" /> <author> <name>nokh9503</name> </author> <category term="Algorithm" /> <category term="Greedy" /> <summary> 거스름돈 풀이 받을 잔돈을 가장 적게 주는 방법으로 가장 기초적인 탐욕 알고리즘 문제이다. 풀이는 다음과 같다. 화폐 단위가 주어졌을 때 가장 큰 값 부터 작은 값으로 나열해준다. 반복문을 통해서 한번 거슬러 줄 수 있는 만큼 숫자를 세고 남은 거스름돈을 구하여 더이상 구할 수 없을 때까지 구해주면 된다. 코드 money = [500, 100, 50, 10, 5, 1] # 화폐 단위 N = 1000 - int(input()) # 지불한 돈 입력하여 거스름 돈 생성 cnt = 0 for i in money: cnt += N // i # 한번 거슬러 줄 수 있음 N %= i print(cnt) 결과 </summary> </entry> <entry><title>[백준 2920] 음계</title><link href="https://nokh9503.github.io/posts/%EB%B0%B1%EC%A4%80-2920-%EC%9D%8C%EA%B3%84/" rel="alternate" type="text/html" title="[백준 2920] 음계" /><published>2021-03-11T23:42:00+09:00</published> <updated>2021-03-11T23:42:00+09:00</updated> <id>https://nokh9503.github.io/posts/%EB%B0%B1%EC%A4%80-2920-%EC%9D%8C%EA%B3%84/</id> <content src="https://nokh9503.github.io/posts/%EB%B0%B1%EC%A4%80-2920-%EC%9D%8C%EA%B3%84/" /> <author> <name>nokh9503</name> </author> <category term="Algorithm" /> <category term="Implement" /> <summary> 음계 풀이 간단한 배열을 이용한 문제로 파이썬에서의 배열의 개념과 구현만 알고 있으면 풀 수 있는 문제이다. 코드 s = list(map(int, input().split(' '))) # 음계 입력 ascending = True descending = True for i in range(1, 8): # 오름차순이면 descending은 False if s[i] &amp;gt; s[i-1]: descending = False # 내림차순이면 ascending은 False elif s[i] &amp;lt; s[i-1]: ascending = False if ascending: print('ascending') elif descending... </summary> </entry> <entry><title>[자료구조]큐(Queue)</title><link href="https://nokh9503.github.io/posts/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%81%90(Queue)/" rel="alternate" type="text/html" title="[자료구조]큐(Queue)" /><published>2021-03-11T22:26:00+09:00</published> <updated>2021-03-11T21:26:40+09:00</updated> <id>https://nokh9503.github.io/posts/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%81%90(Queue)/</id> <content src="https://nokh9503.github.io/posts/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%ED%81%90(Queue)/" /> <author> <name>nokh9503</name> </author> <category term="Data Structure" /> <category term="Queue" /> <summary> 대표적인 데이터 구조: 큐(Queue) 1. 큐 구조 줄을 서는 행위와 유사 가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조 음식점에서 가장 먼저 줄을 선 사람이 제일 먼저 음식점에 입장하는 것과 동일 FIFO(First-In, First-Out) 또는 LILO(Last-In, Last-Out) 방식으로 스택과 꺼내는 순서가 반대 2. 알아둘 용어 Enqueue: 큐에 데이터를 넣는 기능 Dequeue: 큐에서 데이터를 꺼내는 기능 3. 파이썬 queue 라이브러리 활용해서 큐 자료구조 사용하기 queue 라이브러리에는 다양한 구조로 Queue(), LifoQueue(), PriorityQueue() 제공 ... </summary> </entry> <entry><title>[자료구조]배열(Array)</title><link href="https://nokh9503.github.io/posts/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%B0%B0%EC%97%B4(Array)/" rel="alternate" type="text/html" title="[자료구조]배열(Array)" /><published>2021-03-11T06:00:00+09:00</published> <updated>2021-03-11T06:00:00+09:00</updated> <id>https://nokh9503.github.io/posts/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%B0%B0%EC%97%B4(Array)/</id> <content src="https://nokh9503.github.io/posts/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EB%B0%B0%EC%97%B4(Array)/" /> <author> <name>nokh9503</name> </author> <category term="Data Structure" /> <category term="Array" /> <summary> 배열(Array)이란? 데이터를 나열하고, 각 데이터를 인덱스에 대응하도록 구성한 데이터 구조 파이썬에서는 리스트 타입이 배열 기능을 제공하고 있음 1. 배열이 왜 필요할까? 같은 종류의 데이터를 효율적으로 관리하기 위해 사용 같은 종류의 데이터를 순차적으로 저장 배열의 장점: 빠른 접근 가능 배열의 단점: 추가/삭제가 쉽지 않음, 미리 최대 길이를 지정해야 함 2. 파이썬과 C언어의 배열 예제 C언어 예제 #include &amp;lt;stdio.h&amp;gt; int main(int argc, char* argv[]) { char country[3] = "US"; printf("%c%c\n", country[0], country[1]); printf(... </summary> </entry> <entry><title>[알고리즘]탐욕 알고리즘(Greedy)의 이해</title><link href="https://nokh9503.github.io/posts/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%83%90%EC%9A%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98(Greedy)%EC%9D%98-%EC%9D%B4%ED%95%B4/" rel="alternate" type="text/html" title="[알고리즘]탐욕 알고리즘(Greedy)의 이해" /><published>2021-03-11T00:30:00+09:00</published> <updated>2021-03-11T00:30:00+09:00</updated> <id>https://nokh9503.github.io/posts/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%83%90%EC%9A%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98(Greedy)%EC%9D%98-%EC%9D%B4%ED%95%B4/</id> <content src="https://nokh9503.github.io/posts/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%83%90%EC%9A%95-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98(Greedy)%EC%9D%98-%EC%9D%B4%ED%95%B4/" /> <author> <name>nokh9503</name> </author> <category term="Algorithm" /> <category term="Greedy" /> <summary> 1. 탐욕 알고리즘 이란? Greedy algorithm 또는 탐욕 알고리즘 이라고 불림 최적의 해에 가까운 값을 구하기 위해 사용됨 여러 경우 중 하나를 결정해야할 때마다, 매순간 최적이라고 생각되는 경우를 선택하는 방식으로 진행해서, 최종적인 값을 구하는 방식 2. 탐욕 알고리즘 예 문제 1: 동전 문제 지불해야 하는 값이 4720원 일 때 1원 50원 100원, 500원 동전으로 동전의 수가 가장 적게 지불하시오. 가장 큰 동전부터 최대한 지불해야 하는 값을 채우는 방식으로 구현 가능 탐욕 알고리즘으로 매순간 최적이라고 생각되는 경우를 선택 coin = [500, 100, 50, 1] def min_coin_count(v... </summary> </entry> </feed>
